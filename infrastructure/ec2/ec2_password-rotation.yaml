AWSTemplateFormatVersion: 2010-09-09
Description: Secret Rotation mechanism for EC2

Parameters:
  Stage:
    Description: Stage of the application
    Type: String
  ServiceName:
    Description: The name of the application to roll out
    Type: String
  # EC2Id:
  #   Description: Instance Id of the application
  #   Type: "String"

Resources:

  EC2PasswordSecret:
    Metadata:
      cfn_nag:
        rules_to_suppress:  
          - id: W77
            reason: "Secret must not be shared cross account."
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: !Join ['', ['{"username": "', "Administrator", '"}']]
        GenerateStringKey: "password"
        ExcludePunctuation: true
        PasswordLength: 32
      # Tags:
      #   - Key: instanceid
      #     Value: !Ref EC2Id

  RotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: LambdaPermissions
    Properties: 
      RotationLambdaARN: !GetAtt RotatePassword.Arn
      RotationRules: 
        AutomaticallyAfterDays: 90
      SecretId: !Ref EC2PasswordSecret


  RotatePassword:
    Type: AWS::Lambda::Function
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3002
      cfn_nag:
        rules_to_suppress:  
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "Lambda function is only used by the event rule periodically, concurrent calls are very limited."
    Properties:
      Description: Function to rotate password of windows instance
      Code: "lambda/password-rotation/"
      FunctionName: !Sub "ec2-password-rotation-${ServiceName}-${Stage}"
      Role: !GetAtt ExecutionRole.Arn
      Runtime: python3.8
      Handler: main.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          SERVICE_NAME: !Ref ServiceName
          MY_AWS_REGION: !Ref AWS::Region

  LambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RotatePassword.Arn
      Principal: 'secretsmanager.amazonaws.com'

  ExecutionRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:  
          - id: W11
            reason: "The * resource on pass role is allowed since naming pattern cannot be determined at this stage."
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
      Policies:
        - PolicyName: SecretsManagerPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - "secretsmanager:DescribeSecret"
                - "secretsmanager:GetSecretValue"
                - "secretsmanager:PutSecretValue"
                - "secretsmanager:UpdateSecretVersionStage"
                - "secretsmanager:GetRandomPassword"
                Resource: '*'
              - Effect: Allow
                Action:
                - "ec2:DescribeInstances"
                Resource: '*'